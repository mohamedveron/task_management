// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// Defines values for NewTaskState.
const (
	NewTaskStateActive NewTaskState = "active"

	NewTaskStateDone NewTaskState = "done"

	NewTaskStateFailed NewTaskState = "failed"

	NewTaskStatePlanned NewTaskState = "planned"
)

// NewTask defines model for NewTask.
type NewTask struct {
	Name  string       `json:"name"`
	State NewTaskState `json:"state"`
}

// NewTaskState defines model for NewTask.State.
type NewTaskState string

// Task defines model for Task.
type Task struct {
	// Embedded struct due to allOf(#/components/schemas/NewTask)
	NewTask `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id    string `json:"id"`
	Owner *User  `json:"owner,omitempty"`

	// paticipants in the task
	Paticipants *[]User `json:"paticipants,omitempty"`
}

// User defines model for User.
type User struct {
	Email     string `json:"email"`
	FirstName string `json:"firstName"`
	Id        string `json:"id"`
	LastName  string `json:"lastName"`
}

// CreatetaskJSONBody defines parameters for Createtask.
type CreatetaskJSONBody NewTask

// UpdatetaskJSONBody defines parameters for Updatetask.
type UpdatetaskJSONBody NewTask

// CreatetaskJSONRequestBody defines body for Createtask for application/json ContentType.
type CreatetaskJSONRequestBody CreatetaskJSONBody

// UpdatetaskJSONRequestBody defines body for Updatetask for application/json ContentType.
type UpdatetaskJSONRequestBody UpdatetaskJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all Users
	// (GET /Users)
	GetUsers(w http.ResponseWriter, r *http.Request)
	// Get all tasks
	// (GET /tasks)
	GetTasks(w http.ResponseWriter, r *http.Request)
	// Create new task
	// (POST /tasks)
	Createtask(w http.ResponseWriter, r *http.Request)
	// Update task
	// (PUT /tasks/{id})
	Updatetask(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTasks operation middleware
func (siw *ServerInterfaceWrapper) GetTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTasks(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Createtask operation middleware
func (siw *ServerInterfaceWrapper) Createtask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Createtask(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Updatetask operation middleware
func (siw *ServerInterfaceWrapper) Updatetask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Updatetask(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/Users", wrapper.GetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tasks", wrapper.GetTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/tasks", wrapper.Createtask)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/tasks/{id}", wrapper.Updatetask)
	})

	return r
}

